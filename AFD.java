/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package AFD;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Argeo
 */
public class AFD extends javax.swing.JFrame {
    //declaramos variables y vectores de manera global

    private String Pa;
    private String[] palabra;
    String[] e_actual;
    String[] e_siguiente;
    String[] entrada;
    String[] simbolo;
    String estados[];
    String matriz[][];
    int p;
    int y, b, a, o = 1, bb;
    String estado, z, en;
    String estado1 = "1";
    int entrada_matriz[];

    /**
     * Creates new form AFD
     */
    public AFD() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TxtCadena = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Automata Finito Determinista AFD");

        jButton1.setText("Validar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Estado Actual", "Simbolo", "Entrada", "Estado Siguiente"
            }
        ));
        Tabla.setToolTipText("");
        jScrollPane1.setViewportView(Tabla);

        jLabel1.setText("Numero: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TxtCadena, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(65, 65, 65))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TxtCadena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //creamos un metodo para limpiar la tabla cada que validemos una nueva cadena

    private void Clear() {
        DefaultTableModel modelo = (DefaultTableModel) Tabla.getModel();
        for (int i = 0; i < Tabla.getRowCount(); i++) {
            modelo.removeRow(i);
            i -= 1;
        }
    }
    
    
    

    //este es el evento que se genera al presionar el voton "validar"
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Clear();
        matriz = new String[10][10];
        matriz[1][1] = "3";
        matriz[1][2] = "3";
        matriz[1][3] = "Eror";
        matriz[1][4] = "2";
        matriz[1][5] = "Eror";
        matriz[1][6] = "Eror";

        matriz[2][1] = "Eror";
        matriz[2][2] = "Eror";
        matriz[2][3] = "4";
        matriz[2][4] = "2";
        matriz[2][5] = "Eror";
        matriz[2][6] = "Aceptar";

        matriz[3][1] = "Eror";
        matriz[3][2] = "Eror";
        matriz[3][3] = "Eror";
        matriz[3][4] = "2";
        matriz[3][5] = "Eror";
        matriz[3][6] = "Eror";

        matriz[4][1] = "Eror";
        matriz[4][2] = "Eror";
        matriz[4][3] = "Eror";
        matriz[4][4] = "5";
        matriz[4][5] = "Eror";
        matriz[4][6] = "Eror";

        matriz[5][1] = "Eror";
        matriz[5][2] = "Eror";
        matriz[5][3] = "Eror";
        matriz[5][4] = "5";
        matriz[5][5] = "6";
        matriz[5][6] = "Aceptar";

        matriz[6][1] = "8";
        matriz[6][2] = "8";
        matriz[6][3] = "Eror";
        matriz[6][4] = "7";
        matriz[6][5] = "Eror";
        matriz[6][6] = "Eror";

        matriz[7][1] = "Eror";
        matriz[7][2] = "Eror";
        matriz[7][3] = "Eror";
        matriz[7][4] = "7";
        matriz[7][5] = "Eror";
        matriz[7][6] = "Aceptar";

        matriz[8][1] = "Eror";
        matriz[8][2] = "Eror";
        matriz[8][3] = "Eror";
        matriz[8][4] = "7";
        matriz[8][5] = "Eror";
        matriz[8][6] = "Eror";




        ordenamiento();



    int as = 0;
        //inicia el ciclo do-while
        do {
            //este if es para ver en que momento se insertara el fin de cadena (fdc)

            



            //utilizamos switch para ver que tipo de entrada_matriz tenemos: (D, +, -, ., e, fdc))
            switch (palabra[as]) {
                case "0":
                case "1":
                case "2":
                case "3":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                case "9":
                    entrada[as] = palabra[as];
                    break;
                case "e":
                    entrada[as] = palabra[as];
                    break;
                case ".":
                    entrada[as] = palabra[as];
                    break;
                case "+":
                    entrada[as] = palabra[as];

                    break;
                case "-":
                    entrada[as] = palabra[as];

                    break;
                case "fdc":
                    entrada[as] = "fdc";
                    break;
                //en caso de no ser una entrada_matriz correcta se genera un error
                default:
//                    estado = "Error";
                    estados[as]="Error";
                    
                    break;
            }

        JOptionPane.showMessageDialog(null, e_actual[as] + "jajaj " + as + " jajaja" + entrada[as] + "jjajaja" + estado1);
            
//            estado1=ValueOf(palabra[o]);

            e_actual[as + 1] = matriz[Integer.valueOf(estado1)][entrada_matriz[as]];
            estado1 =e_actual[as + 1];
//            e_siguiente[o]=String.valueOf(estado1);
            e_siguiente[as] = e_actual[as + 1];

            
            DefaultTableModel modelo = (DefaultTableModel) Tabla.getModel();
            Object fila[] = {e_actual[as], simbolo[as], entrada[as],e_siguiente[as]};
            modelo.addRow(fila);
            as++;


        } while (estados[as].equals("Aceptar"));


        //aqui se ira visualizando cda Estado, Simbolo, Entrada y Edo Siguiente
//        for (int xc = 0; xc <= o; xc++) {
//        }


        if (e_actual[o - 1].equals("2")) {
            jLabel2.setText("Cadena Valida");
        } else if (e_actual[o - 1].equals("5")) {
            jLabel2.setText("Cadena Valida");
        } else if (e_actual[o - 1].equals("7")) {
            jLabel2.setText("Cadena Valida");
        } else {
            jLabel2.setText("Error, Cadena No Valida");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    
    
    
    
    
    
    
    public void ordenamiento(){
        jLabel2.setText("");
        // inicializamos variables y vectores;
//        estado = "Aceptar";
        Pa = TxtCadena.getText();
        a = Pa.length();
        e_actual = new String[a + 2];
        e_siguiente = new String[a + 2];
        entrada = new String[a + 2];
        simbolo = new String[a + 2];
        palabra = new String[a + 2];
        estados= new String[a+2];
        entrada_matriz = new int[a + 2];
        
        //este for es para eliminar los datos cada ves que validamos una cadena
        for (int v = 0; v <= a+1; v++) {
            entrada[v] = "";
            simbolo[v] = "";
            e_actual[v] = "";
            e_siguiente[v] = "";
            entrada_matriz[v]=0;
            estados[v]="";
        }
        estado1="1";
        y = 0;
        o = 0;
        e_actual[o] = "1";
        //inicia el ciclo do-while
        do {

            if (o < a) {
                palabra[o] = Pa.substring(y, y+ 1);
                estados[o]="Aceptar";

                switch (palabra[o]) {
                    case "0":
                    case "1":
                    case "2":
                    case "3":
                    case "4":
                    case "5":
                    case "6":
                    case "7":
                    case "8":
                    case "9":
//                        z = "d";
                        entrada_matriz[o] = 4;
                        simbolo[o]="D";
                        break;
                    case "-":
//                        z = "-";
                        entrada_matriz[o] = 1;
                        simbolo[o]="-";
                        break;
                    case "+":
//                        z = "+";
                        entrada_matriz[o] = 2;
                        simbolo[o]="+";
                        break;
                    case ".":
//                        z = ".";
                        entrada_matriz[o] = 3;
                        simbolo[o]=".";
                        break;
                    case "e":
//                        z = "e";
                        entrada_matriz[o] = 5;
                        simbolo[o]="e";
                        break;
                }
            } else {
                z = "fdc";
                palabra[o] = z;
                entrada_matriz[o] = 6;
                simbolo[o]="fdc";
                estados[o]="Aceptar";
                
            }
            estados[o+1]="Error";
            JOptionPane.showMessageDialog(null,o+""+entrada_matriz[o]+""+palabra[o]);
            o++;
            y++;
        } while (o <= a);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AFD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AFD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AFD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AFD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AFD().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla;
    private javax.swing.JTextField TxtCadena;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
